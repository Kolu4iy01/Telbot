from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup, KeyboardButton,Message, InlineKeyboardMarkup, InlineKeyboardButton

from routers.command_router import UserState
from shared import user_state, status_translation, get_user_status, get_start_keyboard, save_users, users, load_proxies, save_proxies,is_valid_ip, is_valid_port
from aiogram.fsm.state import State, StatesGroup


admin_router = Router()

# –°—Ç–∞–Ω –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ
class ProxyEditStates(StatesGroup):
    waiting_for_ip = State()
    waiting_for_port = State()
    waiting_for_username = State()
    waiting_for_password = State()

# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ
@admin_router.callback_query(lambda callback_query: callback_query.data.startswith('edit_proxy_'))
async def edit_proxy(callback_query: CallbackQuery, state: FSMContext):
    proxy_index = int(callback_query.data.split('_')[2])
    await callback_query.message.answer("üîÑ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π IP –¥–ª—è –ø—Ä–æ–∫—Å—ñ.")
    await state.update_data(proxy_index=proxy_index)
    await state.set_state(ProxyEditStates.waiting_for_ip)


# –û–±—Ä–æ–±–∫–∞ IP
@admin_router.message(ProxyEditStates.waiting_for_ip)
async def process_ip(message: Message, state: FSMContext):
    user_data = await state.get_data()
    proxy_index = user_data['proxy_index']

    if not is_valid_ip(message.text):
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç IP. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    proxies = load_proxies()
    proxies[proxy_index]['ip'] = message.text
    save_proxies(proxies)

    await message.answer("üîÑ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–∫—Å—ñ.")
    await state.set_state(ProxyEditStates.waiting_for_port)


# –û–±—Ä–æ–±–∫–∞ –ø–æ—Ä—Ç—É
@admin_router.message(ProxyEditStates.waiting_for_port)
async def process_port(message: Message, state: FSMContext):
    user_data = await state.get_data()
    proxy_index = user_data['proxy_index']

    if not message.text.isdigit() or not (1 <= int(message.text) <= 65535):
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç—É. –ü–æ—Ä—Ç –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º –≤—ñ–¥ 1 –¥–æ 65535. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    proxies = load_proxies()
    proxies[proxy_index]['port'] = message.text
    save_proxies(proxies)

    await message.answer("üîÑ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ª–æ–≥—ñ–Ω –¥–ª—è –ø—Ä–æ–∫—Å—ñ.")
    await state.set_state(ProxyEditStates.waiting_for_username)


# –û–±—Ä–æ–±–∫–∞ –ª–æ–≥—ñ–Ω–∞
@admin_router.message(ProxyEditStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    user_data = await state.get_data()
    proxy_index = user_data['proxy_index']

    proxies = load_proxies()
    proxies[proxy_index]['username'] = message.text
    save_proxies(proxies)

    await message.answer("üîÑ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–∫—Å—ñ.")
    await state.set_state(ProxyEditStates.waiting_for_password)


# –û–±—Ä–æ–±–∫–∞ –ø–∞—Ä–æ–ª—è
@admin_router.message(ProxyEditStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    user_data = await state.get_data()
    proxy_index = user_data['proxy_index']

    proxies = load_proxies()
    proxies[proxy_index]['password'] = message.text
    save_proxies(proxies)

    await message.answer("‚úÖ –ü—Ä–æ–∫—Å—ñ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await manage_proxies(message)

    await state.clear()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ
@admin_router.message(lambda message: message.text == "ü™Ñ –ö–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ")
async def manage_proxies(message: Message):
    proxies = load_proxies()
    if not proxies:
        await message.answer("üìã –£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –ø—Ä–æ–∫—Å—ñ.")
        return

    for i, proxy in enumerate(proxies):
        await message.answer(build_proxy_info_message(proxy, i), reply_markup=build_proxy_keyboard(proxy['enabled'], i))


def build_proxy_info_message(proxy, index):
    return (
        f"üåê –ü—Ä–æ–∫—Å—ñ {index + 1}:\n"
        f"IP: {proxy.get('ip', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"–ü–æ—Ä—Ç: {proxy.get('port', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"–õ–æ–≥—ñ–Ω: {proxy.get('username', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"–ü–∞—Ä–æ–ª—å: {proxy.get('password', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
    )


def build_proxy_keyboard(is_enabled, proxy_index):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–í–∏–º–∫–Ω—É—Ç–∏" if is_enabled else "–í–≤—ñ–º–∫–Ω—É—Ç–∏",
                callback_data=f"toggle_proxy_{proxy_index}_{'off' if is_enabled else 'on'}"
            ),
            InlineKeyboardButton(
                text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                callback_data=f"edit_proxy_{proxy_index}"
            )
        ]
    ])
    return keyboard


@admin_router.callback_query(lambda callback_query: callback_query.data.startswith('toggle_proxy_'))
async def toggle_proxy(callback_query: CallbackQuery):
    proxy_index = int(callback_query.data.split('_')[2])
    proxies = load_proxies()

    if proxy_index < len(proxies):
        proxy = proxies[proxy_index]
        new_status = not proxy.get('enabled', False)
        proxy['enabled'] = new_status

        # –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
        save_proxies(proxies)

        await callback_query.answer(f"‚úÖ –ü—Ä–æ–∫—Å—ñ {proxy_index + 1} –±—É–ª–æ {'–≤–≤—ñ–º–∫–Ω–µ–Ω–æ' if new_status else '–≤–∏–º–∫–Ω–µ–Ω–æ'}.")

        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π reply_markup
        new_reply_markup = build_proxy_keyboard(new_status, proxy_index)

        # –û–Ω–æ–≤–∏—Ç–∏ reply_markup
        await callback_query.message.edit_reply_markup(reply_markup=new_reply_markup)
    else:
        await callback_query.answer("‚ùå –ü—Ä–æ–∫—Å—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")




#___________________________________________________________________________________

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è Telegram ID –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@admin_router.message(UserState.waiting_for_user_id)
async def handle_user_id_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    target_user_id = message.text.strip()
    user_status = get_user_status(user_id)

    if target_user_id.isdigit() and int(target_user_id) in users:
        await state.set_state(UserState.waiting_for_new_status)
        user_state['target_user_id'] = int(target_user_id)
        await message.answer(
            f"üö¶ –í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞(Current Status:{user_status}):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="demo")],
                    [KeyboardButton(text="unlim")],
                    [KeyboardButton(text="admin")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
    else:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Telegram ID.")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@admin_router.message(UserState.waiting_for_new_status)
async def handle_new_status_selection(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    new_status = message.text.strip()
    target_user_id = user_state.get('target_user_id')

    if new_status in ["demo", "unlim", "admin"]:
        users[target_user_id]['status'] = new_status
        save_users(users)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {target_user_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {status_translation.get(new_status, new_status)}.", reply_markup=get_start_keyboard(admin_id))
        await state.set_state(UserState.waiting_for_start)
    else:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞—Ç—É—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.")
